services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ms_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_NODE_IP_ADDRESS: 0.0.0.0
    networks:
      - microservices-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres: 
    image: postgres:16-alpine
    container_name: ms_postgres
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: orders_db
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432" 
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - microservices-net
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U admin -d orders_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  users:
    build:
      context: .                     
      dockerfile: ./services/users-service/Dockerfile
    container_name: ms_users
    restart: always
    environment:
      PORT: 3001
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      EXCHANGE: app.topic
      DATABASE_URL: file:/app/data/users.db
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks: 
      - microservices-net
    volumes:
      - usersdb:/app/data
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  orders:
    build:
      context: .                    
      dockerfile: ./services/orders-service/Dockerfile
    container_name: ms_orders
    restart: always
    environment:
      PORT: 3002
      USERS_BASE_URL: http://users:3001
      HTTP_TIMEOUT_MS: 2000
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      EXCHANGE: app.topic
      QUEUE: orders.q
      ROUTING_KEY_USER_CREATED: user.created
      DATABASE_URL: postgresql://admin:admin@postgres:5432/orders_db?schema=public
    depends_on:
      rabbitmq:
        condition: service_started
      users:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "3002:3002"
    networks: 
      - microservices-net
    volumes:
     - ./services/orders-service:/app
     - ./common:/app/common
    healthcheck: # <-- MELHORIA
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    container_name: ms_gateway
    restart: always
    environment:
      PORT: 3000
      USERS_URL: http://users:3001
      ORDERS_URL: http://orders:3002
    depends_on:
      users:
        condition: service_started
      orders:
        condition: service_started
    ports:
      - "3000:3000"
    networks: 
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  pgdata:
  usersdb:

